# Permission is hereby granted, free of charge, to any person obtaining a copy

# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import os
import subprocess
from threading import Timer
from libqtile import hook

from libqtile import bar, layout, widget
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal



mod = "mod4"
terminal = "kitty"

# Función para ejecutar el script lanche.sh
def run_script(qtile):
    # Ejecuta el script lanche.sh
    os.system("bash ~/.config/polybar/launch.sh &")
    
    # Función para matar polybar después de 10 segundos
    def kill_polybar():
        subprocess.call(["killall", "polybar"])
    
    # Inicia el temporizador para matar polybar después de 5 segundos
    timer = Timer(10, kill_polybar)
    timer.start()

def run_rofi(qtile):
    # Ejecuta el script lanche.sh
    os.system("bash ~/.config/rofi/launchers/type-1/launcher.sh &")

keys = [
    # A list of available commands that can be bound to keys can be found
    # at https://docs.qtile.org/en/latest/manual/config/lazy.html
    
    # Ejecuta el script con Esc y mata el proceso después de 5 segundos
    # Key([], "Esc", lazy.function(run_script_and_kill), desc="Ejecuta lanche.sh y mata después de 5 segundos"),
    Key([mod], "Escape", lazy.function(run_script), desc="Ejecuta lanche.sh"),
    Key([mod], "space", lazy.function(run_rofi), desc="Ejecuta rofi"),



    # Cambiar entre ventanas
    Key([mod], "h", lazy.layout.left(), desc="Mover el foco a la izquierda"),
    Key([mod], "l", lazy.layout.right(), desc="Mover el foco a la derecha"),
    Key([mod], "j", lazy.layout.down(), desc="Mover el foco hacia abajo"),
    Key([mod], "k", lazy.layout.up(), desc="Mover el foco hacia arriba"),

    #Key([mod], "space", lazy.layout.next(), desc="Mover el enfoque de la ventana a otra ventana"),
    

    # Mover ventanas entre columnas izquierda/derecha o mover arriba/abajo en la pila actual.
    # Moverse fuera del rango en el diseño de columnas creará una nueva columna.
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Mover ventana a la izquierda"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Mover ventana a la derecha"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Mover ventana hacia abajo"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Mover ventana hacia arriba"),

    # Atajos de teclado para hacer crecer ventanas (y encoger si es necesario)
    # Atajos de teclado para hacer crecer o encoger ventanas
    Key([mod, "control"], "h", lazy.layout.grow_left(), desc="Agrandar ventana a la izquierda"),
    Key([mod, "control"], "l", lazy.layout.grow_right(), desc="Agrandar ventana a la derecha"),
    Key([mod, "control"], "j", lazy.layout.grow_down(), desc="Agrandar ventana hacia abajo"),
    Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Agrandar ventana hacia arriba"),
    Key([mod], "n", lazy.layout.normalize(), desc="Restablecer todos los tamaños de ventana"),

    # Alternar entre los lados divididos y no divididos de la pila.
    # Split ,Dividir = todas las ventanas mostradas
    # Unsplit = 1 ventana visible, similar a la disposición de ventana maximizada, pero aún con...

    # multiple stack panes
    # Múltiples paneles de stack
    Key(
        [mod, "shift"],
        "Return",
        lazy.layout.toggle_split(),
        desc="Alternar entre dividir y no dividir lados de la stack",

    ),
    Key([mod], "Return", lazy.spawn(terminal), desc="Abrir terminal"),

    # Toggle between different layouts as defined below
    # Alternar entre diferentes diseños como se definen a continuación
    Key([mod], "Tab", lazy.next_layout(), desc="Alternar entre diseños"),
    Key([mod], "w", lazy.window.kill(), desc="Cerrar la ventana enfocada"),
    Key(
        [mod],
        "f",
        lazy.window.toggle_fullscreen(),
        desc="Alternar pantalla completa en la ventana enfocada",

    ),
    Key([mod], "t", lazy.window.toggle_floating(), desc="Alternar ventana flotante en la ventana enfocada"),
    Key([mod, "control"], "r", lazy.reload_config(), desc="Recargar la configuración"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Apagar Qtile"),
    Key([mod], "r", lazy.spawncmd(), desc="Ejecutar un comando utilizando un widget de entrada"),
]

groups = [Group(i) for i in "1234"]
for i in groups:
    keys.extend(
        [
            # mod1 + letra del grupo = cambiar al grupo
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                desc="Cambiar al grupo {}".format(i.name),
            ),

            # mod1 + shift + letra del grupo = cambiar y mover la ventana enfocada al grupo

            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=True),
                desc="Cambiar y mover la ventana enfocada al grupo {}".format(i.name),

            ),
            # O, utiliza lo siguiente si prefieres no cambiar al grupo.
            # mod1 + shift + letra del grupo = mover la ventana enfocada al grupo
            # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
            #     desc="Mover la ventana enfocada al grupo {}".format(i.name)),
        ]
    )



layouts = [
    #layout.Max(),
    layout.Max(border_focus = "#0000", border_width = 0, margin=15),
    layout.Columns(border_focus="#00000000", border_width = 0, margin=15),
]

widget_defaults = dict(
    font="sans",
    fontsize=12,
    padding=0,
    #padding=3,
)
extension_defaults = widget_defaults.copy()
screens = [
    Screen(
        #bottom=bar.Bar(
        #    [
        #        widget.CurrentLayout(),
        #        widget.GroupBox(),
        #        widget.Prompt(),
        #        widget.WindowName(),
        #        widget.Chord(
        #            chords_colors={
        #                "launch": ("#ff0000", "#ffffff"),
        #            },
        #            name_transform=lambda name: name.upper(),
        #        ),
        #        widget.TextBox("default config", name="default"),
        #        widget.TextBox("Press &lt;M-r&gt; to spawn", foreground="#d75f5f"),
        #        # NB Systray is incompatible with Wayland, consider using StatusNotifier instead
        #        # widget.StatusNotifier(),
        #        widget.Systray(),
        #        widget.Clock(format="%Y-%m-%d %a %I:%M %p"),
        #        widget.QuickExit(),
        #    ],
        #    24,
        #    # border_width=[2, 0, 2, 0],  # Draw top and bottom borders
        #    # border_color=["ff00ff", "000000", "ff00ff", "000000"]  # Borders are magenta
        #),
        # You can uncomment this variable if you see that on X11 floating resize/moving is laggy
        # By default we handle these events delayed to already improve performance, however your system might still be struggling
        # This variable is set to None (no cap) by default, but you can set it to 60 to indicate that you limit it to 60 events per second
        # x11_drag_polling_rate = 60,
    ),
]
# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
floats_kept_above = True
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"


@hook.subscribe.startup_once
def autostart():
    script = os.path.expanduser("~/.config/qtile/autostart.sh")
    subprocess.run([script])
